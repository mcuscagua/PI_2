{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "from sklearn.cluster import AgglomerativeClustering\n",
    "import scipy.cluster.hierarchy as sch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('Rentabilidad de estrategias base 100.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['year'] = df['Date'].apply(lambda x: x.split('-')[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "años = ['2010','2011','2012','2013','2014','2015',\n",
    "        '2016','2017','2018','2019']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = df[df['year'].isin(años)]\n",
    "df2 = df2.drop('year',axis=1)\n",
    "df2=df2.set_index('Date').tail(365)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LA1</th>\n",
       "      <th>SA1</th>\n",
       "      <th>LSA1</th>\n",
       "      <th>LA101</th>\n",
       "      <th>SA101</th>\n",
       "      <th>LSA101</th>\n",
       "      <th>LA2</th>\n",
       "      <th>SA2</th>\n",
       "      <th>LSA2</th>\n",
       "      <th>LA3</th>\n",
       "      <th>...</th>\n",
       "      <th>LSA53</th>\n",
       "      <th>LA54</th>\n",
       "      <th>SA54</th>\n",
       "      <th>LSA54</th>\n",
       "      <th>LA6</th>\n",
       "      <th>SA6</th>\n",
       "      <th>LSA6</th>\n",
       "      <th>LAMAR</th>\n",
       "      <th>SAMAR</th>\n",
       "      <th>LSAMAR</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-06-18</th>\n",
       "      <td>1737.367401</td>\n",
       "      <td>0.113627</td>\n",
       "      <td>139.034489</td>\n",
       "      <td>1291.966451</td>\n",
       "      <td>0.166123</td>\n",
       "      <td>164.707494</td>\n",
       "      <td>553.739362</td>\n",
       "      <td>0.031974</td>\n",
       "      <td>14.510287</td>\n",
       "      <td>763.821079</td>\n",
       "      <td>...</td>\n",
       "      <td>13.854708</td>\n",
       "      <td>898.782734</td>\n",
       "      <td>0.047452</td>\n",
       "      <td>32.007002</td>\n",
       "      <td>495.522359</td>\n",
       "      <td>0.044421</td>\n",
       "      <td>17.635502</td>\n",
       "      <td>1904.002905</td>\n",
       "      <td>0.046013</td>\n",
       "      <td>58.155216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-06-19</th>\n",
       "      <td>1750.814106</td>\n",
       "      <td>0.116159</td>\n",
       "      <td>143.209326</td>\n",
       "      <td>1293.495752</td>\n",
       "      <td>0.168736</td>\n",
       "      <td>167.493579</td>\n",
       "      <td>545.411240</td>\n",
       "      <td>0.031958</td>\n",
       "      <td>14.284919</td>\n",
       "      <td>758.196310</td>\n",
       "      <td>...</td>\n",
       "      <td>13.656368</td>\n",
       "      <td>884.897775</td>\n",
       "      <td>0.047410</td>\n",
       "      <td>31.483710</td>\n",
       "      <td>483.974481</td>\n",
       "      <td>0.044032</td>\n",
       "      <td>17.070091</td>\n",
       "      <td>1882.663345</td>\n",
       "      <td>0.046167</td>\n",
       "      <td>57.697679</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-06-20</th>\n",
       "      <td>1765.306844</td>\n",
       "      <td>0.115581</td>\n",
       "      <td>143.681921</td>\n",
       "      <td>1309.061274</td>\n",
       "      <td>0.168530</td>\n",
       "      <td>169.304515</td>\n",
       "      <td>547.405108</td>\n",
       "      <td>0.031651</td>\n",
       "      <td>14.200010</td>\n",
       "      <td>762.796214</td>\n",
       "      <td>...</td>\n",
       "      <td>13.707792</td>\n",
       "      <td>892.140540</td>\n",
       "      <td>0.047169</td>\n",
       "      <td>31.581760</td>\n",
       "      <td>486.225968</td>\n",
       "      <td>0.043654</td>\n",
       "      <td>17.002643</td>\n",
       "      <td>1899.010267</td>\n",
       "      <td>0.045955</td>\n",
       "      <td>57.934836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-06-21</th>\n",
       "      <td>1728.545837</td>\n",
       "      <td>0.118855</td>\n",
       "      <td>144.759684</td>\n",
       "      <td>1269.935028</td>\n",
       "      <td>0.171776</td>\n",
       "      <td>167.505106</td>\n",
       "      <td>536.898249</td>\n",
       "      <td>0.032599</td>\n",
       "      <td>14.352823</td>\n",
       "      <td>736.223146</td>\n",
       "      <td>...</td>\n",
       "      <td>13.738785</td>\n",
       "      <td>861.077829</td>\n",
       "      <td>0.047845</td>\n",
       "      <td>30.934743</td>\n",
       "      <td>466.923195</td>\n",
       "      <td>0.044066</td>\n",
       "      <td>16.488329</td>\n",
       "      <td>1830.275060</td>\n",
       "      <td>0.046551</td>\n",
       "      <td>56.588359</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-06-22</th>\n",
       "      <td>1783.524244</td>\n",
       "      <td>0.118681</td>\n",
       "      <td>149.152063</td>\n",
       "      <td>1297.768442</td>\n",
       "      <td>0.169826</td>\n",
       "      <td>169.274735</td>\n",
       "      <td>538.997305</td>\n",
       "      <td>0.031642</td>\n",
       "      <td>13.987535</td>\n",
       "      <td>748.297776</td>\n",
       "      <td>...</td>\n",
       "      <td>13.678007</td>\n",
       "      <td>892.112858</td>\n",
       "      <td>0.047978</td>\n",
       "      <td>32.135456</td>\n",
       "      <td>477.701035</td>\n",
       "      <td>0.043617</td>\n",
       "      <td>16.700956</td>\n",
       "      <td>1848.967289</td>\n",
       "      <td>0.045477</td>\n",
       "      <td>55.861529</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                    LA1       SA1        LSA1        LA101     SA101  \\\n",
       "Date                                                                   \n",
       "2018-06-18  1737.367401  0.113627  139.034489  1291.966451  0.166123   \n",
       "2018-06-19  1750.814106  0.116159  143.209326  1293.495752  0.168736   \n",
       "2018-06-20  1765.306844  0.115581  143.681921  1309.061274  0.168530   \n",
       "2018-06-21  1728.545837  0.118855  144.759684  1269.935028  0.171776   \n",
       "2018-06-22  1783.524244  0.118681  149.152063  1297.768442  0.169826   \n",
       "\n",
       "                LSA101         LA2       SA2       LSA2         LA3  ...  \\\n",
       "Date                                                                 ...   \n",
       "2018-06-18  164.707494  553.739362  0.031974  14.510287  763.821079  ...   \n",
       "2018-06-19  167.493579  545.411240  0.031958  14.284919  758.196310  ...   \n",
       "2018-06-20  169.304515  547.405108  0.031651  14.200010  762.796214  ...   \n",
       "2018-06-21  167.505106  536.898249  0.032599  14.352823  736.223146  ...   \n",
       "2018-06-22  169.274735  538.997305  0.031642  13.987535  748.297776  ...   \n",
       "\n",
       "                LSA53        LA54      SA54      LSA54         LA6       SA6  \\\n",
       "Date                                                                           \n",
       "2018-06-18  13.854708  898.782734  0.047452  32.007002  495.522359  0.044421   \n",
       "2018-06-19  13.656368  884.897775  0.047410  31.483710  483.974481  0.044032   \n",
       "2018-06-20  13.707792  892.140540  0.047169  31.581760  486.225968  0.043654   \n",
       "2018-06-21  13.738785  861.077829  0.047845  30.934743  466.923195  0.044066   \n",
       "2018-06-22  13.678007  892.112858  0.047978  32.135456  477.701035  0.043617   \n",
       "\n",
       "                 LSA6        LAMAR     SAMAR     LSAMAR  \n",
       "Date                                                     \n",
       "2018-06-18  17.635502  1904.002905  0.046013  58.155216  \n",
       "2018-06-19  17.070091  1882.663345  0.046167  57.697679  \n",
       "2018-06-20  17.002643  1899.010267  0.045955  57.934836  \n",
       "2018-06-21  16.488329  1830.275060  0.046551  56.588359  \n",
       "2018-06-22  16.700956  1848.967289  0.045477  55.861529  \n",
       "\n",
       "[5 rows x 27 columns]"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Date</th>\n",
       "      <th>2018-06-18</th>\n",
       "      <th>2018-06-19</th>\n",
       "      <th>2018-06-20</th>\n",
       "      <th>2018-06-21</th>\n",
       "      <th>2018-06-22</th>\n",
       "      <th>2018-06-25</th>\n",
       "      <th>2018-06-26</th>\n",
       "      <th>2018-06-27</th>\n",
       "      <th>2018-06-28</th>\n",
       "      <th>2018-06-29</th>\n",
       "      <th>...</th>\n",
       "      <th>2019-10-28</th>\n",
       "      <th>2019-10-29</th>\n",
       "      <th>2019-10-30</th>\n",
       "      <th>2019-10-31</th>\n",
       "      <th>2019-11-01</th>\n",
       "      <th>2019-11-04</th>\n",
       "      <th>2019-11-05</th>\n",
       "      <th>2019-11-06</th>\n",
       "      <th>2019-11-07</th>\n",
       "      <th>2019-11-08</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>LA1</th>\n",
       "      <td>1737.367401</td>\n",
       "      <td>1750.814106</td>\n",
       "      <td>1765.306844</td>\n",
       "      <td>1728.545837</td>\n",
       "      <td>1783.524244</td>\n",
       "      <td>1749.215797</td>\n",
       "      <td>1772.949826</td>\n",
       "      <td>1777.329054</td>\n",
       "      <td>1796.005396</td>\n",
       "      <td>1813.596260</td>\n",
       "      <td>...</td>\n",
       "      <td>3314.371297</td>\n",
       "      <td>3353.445280</td>\n",
       "      <td>3420.278641</td>\n",
       "      <td>3393.431783</td>\n",
       "      <td>3462.520458</td>\n",
       "      <td>3414.448461</td>\n",
       "      <td>3373.679486</td>\n",
       "      <td>3413.993932</td>\n",
       "      <td>3375.498542</td>\n",
       "      <td>3388.313155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SA1</th>\n",
       "      <td>0.113627</td>\n",
       "      <td>0.116159</td>\n",
       "      <td>0.115581</td>\n",
       "      <td>0.118855</td>\n",
       "      <td>0.118681</td>\n",
       "      <td>0.125115</td>\n",
       "      <td>0.124556</td>\n",
       "      <td>0.129758</td>\n",
       "      <td>0.127258</td>\n",
       "      <td>0.126899</td>\n",
       "      <td>...</td>\n",
       "      <td>0.089416</td>\n",
       "      <td>0.089560</td>\n",
       "      <td>0.090104</td>\n",
       "      <td>0.091462</td>\n",
       "      <td>0.086351</td>\n",
       "      <td>0.082313</td>\n",
       "      <td>0.081873</td>\n",
       "      <td>0.083076</td>\n",
       "      <td>0.081059</td>\n",
       "      <td>0.080931</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LSA1</th>\n",
       "      <td>139.034489</td>\n",
       "      <td>143.209326</td>\n",
       "      <td>143.681921</td>\n",
       "      <td>144.759684</td>\n",
       "      <td>149.152063</td>\n",
       "      <td>154.369418</td>\n",
       "      <td>155.773794</td>\n",
       "      <td>162.664451</td>\n",
       "      <td>161.239500</td>\n",
       "      <td>162.363787</td>\n",
       "      <td>...</td>\n",
       "      <td>299.144587</td>\n",
       "      <td>303.153854</td>\n",
       "      <td>311.037651</td>\n",
       "      <td>313.283906</td>\n",
       "      <td>302.153706</td>\n",
       "      <td>283.831655</td>\n",
       "      <td>278.924911</td>\n",
       "      <td>286.354334</td>\n",
       "      <td>276.173628</td>\n",
       "      <td>276.786539</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LA101</th>\n",
       "      <td>1291.966451</td>\n",
       "      <td>1293.495752</td>\n",
       "      <td>1309.061274</td>\n",
       "      <td>1269.935028</td>\n",
       "      <td>1297.768442</td>\n",
       "      <td>1238.114122</td>\n",
       "      <td>1269.007210</td>\n",
       "      <td>1258.436532</td>\n",
       "      <td>1281.524478</td>\n",
       "      <td>1293.331877</td>\n",
       "      <td>...</td>\n",
       "      <td>2450.563908</td>\n",
       "      <td>2449.241216</td>\n",
       "      <td>2504.382984</td>\n",
       "      <td>2492.303244</td>\n",
       "      <td>2582.336786</td>\n",
       "      <td>2647.538776</td>\n",
       "      <td>2615.014653</td>\n",
       "      <td>2593.955675</td>\n",
       "      <td>2622.756189</td>\n",
       "      <td>2619.289292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SA101</th>\n",
       "      <td>0.166123</td>\n",
       "      <td>0.168736</td>\n",
       "      <td>0.168530</td>\n",
       "      <td>0.171776</td>\n",
       "      <td>0.169826</td>\n",
       "      <td>0.174493</td>\n",
       "      <td>0.175700</td>\n",
       "      <td>0.181140</td>\n",
       "      <td>0.179070</td>\n",
       "      <td>0.178460</td>\n",
       "      <td>...</td>\n",
       "      <td>0.138392</td>\n",
       "      <td>0.136909</td>\n",
       "      <td>0.138095</td>\n",
       "      <td>0.140594</td>\n",
       "      <td>0.134953</td>\n",
       "      <td>0.133924</td>\n",
       "      <td>0.133162</td>\n",
       "      <td>0.132454</td>\n",
       "      <td>0.132202</td>\n",
       "      <td>0.131317</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 365 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Date    2018-06-18   2018-06-19   2018-06-20   2018-06-21   2018-06-22  \\\n",
       "LA1    1737.367401  1750.814106  1765.306844  1728.545837  1783.524244   \n",
       "SA1       0.113627     0.116159     0.115581     0.118855     0.118681   \n",
       "LSA1    139.034489   143.209326   143.681921   144.759684   149.152063   \n",
       "LA101  1291.966451  1293.495752  1309.061274  1269.935028  1297.768442   \n",
       "SA101     0.166123     0.168736     0.168530     0.171776     0.169826   \n",
       "\n",
       "Date    2018-06-25   2018-06-26   2018-06-27   2018-06-28   2018-06-29  ...  \\\n",
       "LA1    1749.215797  1772.949826  1777.329054  1796.005396  1813.596260  ...   \n",
       "SA1       0.125115     0.124556     0.129758     0.127258     0.126899  ...   \n",
       "LSA1    154.369418   155.773794   162.664451   161.239500   162.363787  ...   \n",
       "LA101  1238.114122  1269.007210  1258.436532  1281.524478  1293.331877  ...   \n",
       "SA101     0.174493     0.175700     0.181140     0.179070     0.178460  ...   \n",
       "\n",
       "Date    2019-10-28   2019-10-29   2019-10-30   2019-10-31   2019-11-01  \\\n",
       "LA1    3314.371297  3353.445280  3420.278641  3393.431783  3462.520458   \n",
       "SA1       0.089416     0.089560     0.090104     0.091462     0.086351   \n",
       "LSA1    299.144587   303.153854   311.037651   313.283906   302.153706   \n",
       "LA101  2450.563908  2449.241216  2504.382984  2492.303244  2582.336786   \n",
       "SA101     0.138392     0.136909     0.138095     0.140594     0.134953   \n",
       "\n",
       "Date    2019-11-04   2019-11-05   2019-11-06   2019-11-07   2019-11-08  \n",
       "LA1    3414.448461  3373.679486  3413.993932  3375.498542  3388.313155  \n",
       "SA1       0.082313     0.081873     0.083076     0.081059     0.080931  \n",
       "LSA1    283.831655   278.924911   286.354334   276.173628   276.786539  \n",
       "LA101  2647.538776  2615.014653  2593.955675  2622.756189  2619.289292  \n",
       "SA101     0.133924     0.133162     0.132454     0.132202     0.131317  \n",
       "\n",
       "[5 rows x 365 columns]"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3 = df2.tail(365).transpose()\n",
    "df3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.cluster.hierarchy import dendrogram, linkage"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "z = linkage(df3,method='ward')# method= single, complete, average"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(25,10))\n",
    "plt.title('Hierarchical Clustering Dendogram')\n",
    "plt.xlabel('Sample index')\n",
    "plt.ylabel('distance')\n",
    "dendrogram(z,\n",
    "          leaf_rotation=90.,#Rotate the x axis labels\n",
    "          leaf_font_size=20.,#Font size for the x axis labels\n",
    ")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 7.        , 16.        , 12.94332757,  2.        ])"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[7.00000000e+00, 1.60000000e+01, 1.29433276e+01, 2.00000000e+00],\n",
       "       [2.50000000e+01, 2.70000000e+01, 1.70546095e+01, 3.00000000e+00],\n",
       "       [1.00000000e+00, 4.00000000e+00, 2.21354555e+01, 2.00000000e+00],\n",
       "       [1.00000000e+01, 1.30000000e+01, 2.62366899e+01, 2.00000000e+00],\n",
       "       [1.90000000e+01, 2.80000000e+01, 3.95462649e+01, 4.00000000e+00],\n",
       "       [2.20000000e+01, 3.00000000e+01, 5.16977939e+01, 3.00000000e+00],\n",
       "       [2.90000000e+01, 3.20000000e+01, 1.43880385e+02, 5.00000000e+00],\n",
       "       [8.00000000e+00, 1.70000000e+01, 2.56321813e+02, 2.00000000e+00],\n",
       "       [3.10000000e+01, 3.30000000e+01, 2.98583613e+02, 9.00000000e+00],\n",
       "       [2.00000000e+01, 2.30000000e+01, 7.95568114e+02, 2.00000000e+00],\n",
       "       [1.10000000e+01, 2.60000000e+01, 8.60808491e+02, 2.00000000e+00],\n",
       "       [1.40000000e+01, 3.70000000e+01, 1.20763118e+03, 3.00000000e+00],\n",
       "       [3.40000000e+01, 3.60000000e+01, 1.27474544e+03, 4.00000000e+00],\n",
       "       [6.00000000e+00, 1.50000000e+01, 1.79881246e+03, 2.00000000e+00],\n",
       "       [3.80000000e+01, 3.90000000e+01, 2.83078619e+03, 7.00000000e+00],\n",
       "       [2.00000000e+00, 5.00000000e+00, 3.77946262e+03, 2.00000000e+00],\n",
       "       [2.10000000e+01, 4.00000000e+01, 4.79456187e+03, 3.00000000e+00],\n",
       "       [9.00000000e+00, 1.20000000e+01, 4.87400168e+03, 2.00000000e+00],\n",
       "       [3.50000000e+01, 4.10000000e+01, 5.23554303e+03, 1.60000000e+01],\n",
       "       [1.80000000e+01, 4.40000000e+01, 5.79535505e+03, 3.00000000e+00],\n",
       "       [4.20000000e+01, 4.30000000e+01, 1.34681778e+04, 5.00000000e+00],\n",
       "       [0.00000000e+00, 2.40000000e+01, 1.36312098e+04, 2.00000000e+00],\n",
       "       [3.00000000e+00, 4.80000000e+01, 2.17654335e+04, 3.00000000e+00],\n",
       "       [4.60000000e+01, 4.70000000e+01, 2.17773262e+04, 8.00000000e+00],\n",
       "       [4.50000000e+01, 5.00000000e+01, 5.33293034e+04, 2.40000000e+01],\n",
       "       [4.90000000e+01, 5.10000000e+01, 1.10572260e+05, 2.70000000e+01]])"
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Clarans (Clustering Large Applications based on RANdomized Search)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 1: Decide on values for v, h and k.\n",
    "- 2: for i = 1 : h do\n",
    "- 3: Randomly select a node as the current node C in the graph.\n",
    "- 4: Calculate the total sum of distances for current node C.\n",
    "- 5: Set counter j to 1.\n",
    "- 6: while j ≤ v do\n",
    "- 7: Randomly select a neighbour W of C.\n",
    "- 8: Calculate the total sum of distances for neighbour W.\n",
    "- 9: if total sum of distances for W is lower than for C then\n",
    "- 10: Assign W as the current node C.\n",
    "- 11: Reset j to 1.\n",
    "- 12: else\n",
    "- 13: j = j + 1.\n",
    "- 14: end if\n",
    "- 15: end while\n",
    "- 16: if total sum of distances for C is lowest cost found so far then\n",
    "- 17: Update the best solution found so far.\n",
    "- 18: end if\n",
    "- 19: end for\n",
    "- 20: return the best solution that is found."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "#!pip install pyclustering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyclustering.cluster.clarans import clarans;\n",
    "from pyclustering.utils import timedcall;\n",
    "from sklearn import datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [],
   "source": [
    "#iris =  datasets.load_iris();\n",
    "data = np.array(df3)\n",
    "#data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time :  16.477685999999267 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "#data = data.tolist()\n",
    "\n",
    "#get a glimpse of dataset\n",
    "#print(\"A peek into the dataset : \",data[:4])\n",
    "\n",
    "\n",
    "\"\"\"!\n",
    "@brief Constructor of clustering algorithm CLARANS.\n",
    "@details The higher the value of maxneighbor, the closer is CLARANS to K-Medoids, and the longer is each search of a local minima.\n",
    "@param[in] data: Input data that is presented as list of points (objects), each point should be represented by list or tuple.\n",
    "@param[in] number_clusters: amount of clusters that should be allocated.\n",
    "@param[in] numlocal: the number of local minima obtained (amount of iterations for solving the problem).\n",
    "@param[in] maxneighbor: the maximum number of neighbors examined.        \n",
    "\"\"\"\n",
    "clarans_instance = clarans(data, 3, 6, 4);\n",
    "\n",
    "#calls the clarans method 'process' to implement the algortihm\n",
    "(ticks, result) = timedcall(clarans_instance.process);\n",
    "print(\"Execution time : \", ticks, \"\\n\");\n",
    "\n",
    "#returns the clusters \n",
    "clusters = clarans_instance.get_clusters();\n",
    "\n",
    "#returns the mediods \n",
    "medoids = clarans_instance.get_medoids();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index of the points that are in a cluster :  [[0, 3, 24], [6, 9, 12, 15, 18, 21], [1, 2, 4, 5, 7, 8, 10, 11, 13, 14, 16, 17, 19, 20, 22, 23, 25, 26]] \n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"Index of the points that are in a cluster : \",clusters,'\\n')\n",
    "#print(\"The target class of each datapoint : \",iris.target,'\\n')\n",
    "#print(\"The index of medoids that algorithm found to be best : \",medoids)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [],
   "source": [
    "#strategies = []\n",
    "#clus = []\n",
    "dic = {}\n",
    "for var in range(len(clusters)):\n",
    "    for var2 in clusters[var]:\n",
    "        dic[var2] = var\n",
    "        #strategies.append(df3.index[var2])\n",
    "        #clus.append(var)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [],
   "source": [
    "import operator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [],
   "source": [
    "resultado = sorted(dic.items(), key=operator.itemgetter(0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [],
   "source": [
    "dic = {}\n",
    "for var in resultado:\n",
    "    dic[df3.index[var[0]]] = var[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'LA1': 0,\n",
       " 'SA1': 2,\n",
       " 'LSA1': 2,\n",
       " 'LA101': 0,\n",
       " 'SA101': 2,\n",
       " 'LSA101': 2,\n",
       " 'LA2': 1,\n",
       " 'SA2': 2,\n",
       " 'LSA2': 2,\n",
       " 'LA3': 1,\n",
       " 'SA3': 2,\n",
       " 'LSA3': 2,\n",
       " 'LA44': 1,\n",
       " 'SA44': 2,\n",
       " 'LSA44': 2,\n",
       " 'LA53': 1,\n",
       " 'SA53': 2,\n",
       " 'LSA53': 2,\n",
       " 'LA54': 1,\n",
       " 'SA54': 2,\n",
       " 'LSA54': 2,\n",
       " 'LA6': 1,\n",
       " 'SA6': 2,\n",
       " 'LSA6': 2,\n",
       " 'LAMAR': 0,\n",
       " 'SAMAR': 2,\n",
       " 'LSAMAR': 2}"
      ]
     },
     "execution_count": 185,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = pd.DataFrame.from_dict(dic,orient='index')#,columns=['strategies','cluster'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = clf.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [],
   "source": [
    "results = clf.rename(columns={'index':'strategies',0:'clusters'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>strategies</th>\n",
       "      <th>clusters</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>LA1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>SA1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>LSA1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>LA101</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>SA101</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>LSA101</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>LA2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>SA2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>LSA2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>LA3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>SA3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>LSA3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>LA44</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>SA44</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>LSA44</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>LA53</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>SA53</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>LSA53</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>LA54</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>SA54</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>LSA54</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>LA6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>SA6</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>LSA6</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>LAMAR</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>SAMAR</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>LSAMAR</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   strategies  clusters\n",
       "0         LA1         0\n",
       "1         SA1         2\n",
       "2        LSA1         2\n",
       "3       LA101         0\n",
       "4       SA101         2\n",
       "5      LSA101         2\n",
       "6         LA2         1\n",
       "7         SA2         2\n",
       "8        LSA2         2\n",
       "9         LA3         1\n",
       "10        SA3         2\n",
       "11       LSA3         2\n",
       "12       LA44         1\n",
       "13       SA44         2\n",
       "14      LSA44         2\n",
       "15       LA53         1\n",
       "16       SA53         2\n",
       "17      LSA53         2\n",
       "18       LA54         1\n",
       "19       SA54         2\n",
       "20      LSA54         2\n",
       "21        LA6         1\n",
       "22        SA6         2\n",
       "23       LSA6         2\n",
       "24      LAMAR         0\n",
       "25      SAMAR         2\n",
       "26     LSAMAR         2"
      ]
     },
     "execution_count": 189,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [],
   "source": [
    "sharpeclusters =[] \n",
    "Features = df2\n",
    "for i in range(results['clusters'].nunique()):\n",
    "    \n",
    "    l = results.loc[results['clusters'] == i].index.values.astype(int).tolist()\n",
    "    dfexp=Features.pct_change().iloc[: , l].sum(axis = 1, skipna = True)\n",
    "    r = dfexp.mean()\n",
    "    s = dfexp.std()\n",
    "    \n",
    "    sharpeclusters.append(r/s)\n",
    "sharpeclusters = np.asanyarray(sharpeclusters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.06206268,  0.02784358, -0.02979296])"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sharpeclusters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [],
   "source": [
    "selection = sharpeclusters.argmax()\n",
    "cond = results['clusters'] == selection\n",
    "\n",
    "results['selection'] = np.where(cond, 1, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     1\n",
       "1     0\n",
       "2     0\n",
       "3     1\n",
       "4     0\n",
       "5     0\n",
       "6     0\n",
       "7     0\n",
       "8     0\n",
       "9     0\n",
       "10    0\n",
       "11    0\n",
       "12    0\n",
       "13    0\n",
       "14    0\n",
       "15    0\n",
       "16    0\n",
       "17    0\n",
       "18    0\n",
       "19    0\n",
       "20    0\n",
       "21    0\n",
       "22    0\n",
       "23    0\n",
       "24    1\n",
       "25    0\n",
       "26    0\n",
       "Name: selection, dtype: int64"
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results['selection']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(clusters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f2ed5d90e80>"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df3.transpose().iloc[:,[0,3,24]].plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
